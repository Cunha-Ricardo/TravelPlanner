import openai
import time
from fpdf import FPDF
from fpdf.enums import XPos, YPos

# Chave da OpenAI
openai.api_key = "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"

assistant_id = "asst_orz98VXa4zht5BF5fvHd7TxL"

# Entradas do usu√°rio
destino = input("Digite o destino da viagem: ")
dias = input("Quantos dias voc√™ vai ficar? ")
preferencias = input("Tem alguma prefer√™ncia? (ex: turismo cultural, aventura, descanso) ")

# Cria√ß√£o do prompt incluindo prefer√™ncias e instru√ß√µes espec√≠ficas
mensagem_usuario = f"""
Crie um roteiro detalhado de {dias} dias em {destino}. 
Prefer√™ncias: {preferencias}.

Importante:
1. Forne√ßa um roteiro dia a dia com hor√°rios e atividades espec√≠ficas
2. Inclua recomenda√ß√µes de restaurantes para refei√ß√µes
3. Sugira atra√ß√µes tur√≠sticas populares e tamb√©m lugares menos conhecidos
4. Considere o tempo necess√°rio para deslocamentos entre as atra√ß√µes
5. N√£o fa√ßa perguntas, apenas forne√ßa o roteiro completo
"""

# Cria thread
thread = openai.beta.threads.create()

# Envia mensagem
openai.beta.threads.messages.create(
    thread_id=thread.id,
    role="user",
    content=mensagem_usuario
)

# Executa o assistente
run = openai.beta.threads.runs.create(
    thread_id=thread.id,
    assistant_id=assistant_id
)

print("Gerando roteiro, aguarde...", end="", flush=True)
while True:
    run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
    if run_status.status == "completed":
        break
    print(".", end="", flush=True)
    time.sleep(1)
print("\n")

# Pega resposta
messages = openai.beta.threads.messages.list(thread_id=thread.id)

roteiro_texto = ""
for msg in messages.data[::-1]:
    if msg.role == "assistant":
        roteiro_texto = msg.content[0].text.value
        print("\nüìç Roteiro gerado:\n")
        print(roteiro_texto)
        break

# Verificar se o roteiro foi gerado corretamente
if not roteiro_texto or "Qual o destino" in roteiro_texto:
    print("\nO assistente n√£o gerou um roteiro adequado. Tentando novamente com instru√ß√µes mais claras...")
    
    # Nova tentativa com instru√ß√µes mais expl√≠citas
    mensagem_usuario = f"""
    Crie um roteiro tur√≠stico detalhado para {dias} dias em {destino}.
    Prefer√™ncia: {preferencias}.
    
    Formato obrigat√≥rio:
    - Organize por dias (Dia 1, Dia 2, etc.)
    - Para cada dia, liste atividades com hor√°rios espec√≠ficos
    - Inclua sugest√µes de caf√© da manh√£, almo√ßo e jantar
    - Mencione pontos tur√≠sticos espec√≠ficos de {destino}
    - N√£o fa√ßa perguntas, apenas forne√ßa o roteiro completo
    """
    
    # Envia nova mensagem
    openai.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=mensagem_usuario
    )
    
    # Executa o assistente novamente
    run = openai.beta.threads.runs.create(
        thread_id=thread.id,
        assistant_id=assistant_id
    )
    
    print("Gerando roteiro novamente, aguarde...", end="", flush=True)
    while True:
        run_status = openai.beta.threads.runs.retrieve(thread_id=thread.id, run_id=run.id)
        if run_status.status == "completed":
            break
        print(".", end="", flush=True)
        time.sleep(1)
    print("\n")
    
    # Pega resposta da nova tentativa
    messages = openai.beta.threads.messages.list(thread_id=thread.id)
    
    for msg in messages.data[::-1]:
        if msg.role == "assistant":
            roteiro_texto = msg.content[0].text.value
            print("\nüìç Roteiro gerado (nova tentativa):\n")
            print(roteiro_texto)
            break

# Substituir caracteres Unicode problem√°ticos
roteiro_texto = roteiro_texto.replace("‚Äì", "-")  # Substituir travess√£o por h√≠fen
roteiro_texto = roteiro_texto.replace("‚Äî", "-")  # Substituir travess√£o longo por h√≠fen
roteiro_texto = roteiro_texto.replace(""", '"')  # Substituir aspas curvas
roteiro_texto = roteiro_texto.replace(""", '"')  # Substituir aspas curvas
roteiro_texto = roteiro_texto.replace("'", "'")  # Substituir ap√≥strofo curvo
roteiro_texto = roteiro_texto.replace("'", "'")  # Substituir ap√≥strofo curvo

# Criar PDF estilizado com suporte a UTF-8
class PDF(FPDF):
    def header(self):
        self.set_font("Helvetica", "B", 16)
        self.cell(0, 10, f"Roteiro de Viagem para {destino.title()}", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align="C")
        self.set_font("Helvetica", "I", 12)
        self.cell(0, 10, f"{dias} dias - Prefer√™ncia: {preferencias}", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align="C")
        self.ln(10)
        self.line(10, 35, 200, 35)
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font("Helvetica", "I", 8)
        self.cell(0, 10, "Gerado por TravelMate", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align="C")

pdf = PDF()
pdf.add_page()
pdf.set_font("Helvetica", size=12)

# Escreve o roteiro, mantendo quebras de linha
pdf.multi_cell(0, 10, roteiro_texto)

# Nome do arquivo personalizado com o destino
nome_arquivo = f"{destino.replace(' ', '_')}Roteiro.pdf"
pdf.output(nome_arquivo)
print(f"Roteiro salvo em '{nome_arquivo}'")